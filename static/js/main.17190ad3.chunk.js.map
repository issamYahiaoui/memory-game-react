{"version":3,"sources":["cardImages.js","utils.js","components/CardImage.js","components/Card.js","components/GamePlayGround.js","App.js","serviceWorker.js","index.js"],"names":["cards","shuffleArray","array","sort","Math","random","Image","src","alt","style","className","props","Card","imageURL","isFlipped","canFlip","onClick","GamePlayGround","cardImages","useState","size","count","slice","map","id","uuid","flatMap","e","deepcopy","generatePlayGroundCards","setCards","setCanFlip","firstCard","setFirstCard","secondCard","setSecondCard","matchedCards","setMatchedCards","start","setStart","tries","setTries","setCardIsFlipped","cardID","prev","c","setAllCardsFlipped","setCardCanFlip","resetFirstAndSecondCards","restart","setAllCardsCanFlip","useEffect","setTimeout","console","log","firstCardID","secondCardID","onFailureGuess","filter","getScore","length","card","onCardClick","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.17190ad3.chunk.js","sourcesContent":["const cards = [\n    \"clubs_10.png\", \"clubs_2.png\", \"clubs_3.png\", \"clubs_4.png\", \"clubs_5.png\",\n    \"clubs_6.png\", \"clubs_7.png\", \"clubs_8.png\", \"clubs_9.png\", \"clubs_A.png\",\n    \"clubs_J.png\", \"clubs_K.png\", \"clubs_Q.png\",\n    \"diamonds_10.png\", \"diamonds_2.png\", \"diamonds_3.png\", \"diamonds_4.png\",\n    \"diamonds_5.png\", \"diamonds_6.png\", \"diamonds_7.png\", \"diamonds_8.png\",\n    \"diamonds_9.png\", \"diamonds_A.png\", \"diamonds_J.png\", \"diamonds_K.png\",\n    \"diamonds_Q.png\",\n    \"hearts_10.png\", \"hearts_2.png\", \"hearts_3.png\", \"hearts_4.png\",\n    \"hearts_5.png\", \"hearts_6.png\", \"hearts_7.png\", \"hearts_8.png\",\n    \"hearts_9.png\", \"hearts_A.png\", \"hearts_J.png\", \"hearts_K.png\",\n    \"hearts_Q.png\",\n    \"spades_10.png\", \"spades_2.png\", \"spades_3.png\", \"spades_4.png\",\n    \"spades_5.png\", \"spades_6.png\", \"spades_7.png\", \"spades_8.png\",\n    \"spades_9.png\", \"spades_A.png\", \"spades_J.png\", \"spades_K.png\",\n    \"spades_Q.png\"\n];\n\nexport default cards;\n","import uuid from 'react-uuid';\nimport deepcopy from \"deepcopy\";\n\n const shuffleArray =(array)=>{\n    return array.sort(() => .5 - Math.random());\n}\nexport const generatePlayGroundCards = (count, cardImages)=> {\n\n    if (count % 2 !== 0)\n        throw \"Count must pair. but it is \" + count;\n\n    const cards = shuffleArray(cardImages)\n        .slice(0, count / 2)\n        .map(imageURL => ({\n            id: uuid(),\n            imageURL: \"images/cards/\" + imageURL,\n            isFlipped: false,\n            canFlip: true\n        }))\n        .flatMap(e => [e, {...deepcopy(e), id: uuid()}]);\n\n    return shuffleArray(cards);\n}\n","import React from \"react\";\n\nexport default  Image = ({ src, alt=\"\", style={}, className=\"\", ...props })=>{\n    return <img src={src} alt={alt} style={style} className={className} {...props}/>;\n}\n","import React from \"react\";\nimport Image from \"./CardImage\";\n\nexport default function Card({imageURL, isFlipped, canFlip,onClick}) {\n    return  <div className={\"card\" + (!isFlipped ? ' opened' : '') + (!canFlip ? ' matched' : '')} onClick={onClick}>\n        <div className=\"front\">\n            ?\n        </div>\n        <div className=\"back\">\n            <Image src={imageURL}/>\n        </div>\n    </div>;\n}\n","import React, {useState, useEffect} from 'react'\nimport {generatePlayGroundCards} from \"../utils\";\nimport Card from \"./Card\";\n\n\nconst GamePlayGround = ({cardImages}) => {\n\n    const [size, setSize] = useState(  18);\n    const [cards, setCards] = useState(generatePlayGroundCards(18, cardImages));\n    const [canFlip, setCanFlip] = useState(false);\n    const [firstCard, setFirstCard] = useState(null);\n    const [secondCard, setSecondCard] = useState(null);\n\n    const [matchedCards, setMatchedCards] = useState([]);\n    const [start, setStart] = useState(false);\n    const [tries, setTries] = useState(0);\n\n    const setCardIsFlipped = (cardID, isFlipped) => {\n        setCards(prev => prev.map(c => {\n            if (c.id !== cardID)\n                return c;\n            return {...c, isFlipped};\n        }));\n    }\n    const setAllCardsFlipped = (isFlipped) => {\n        setCards(prev => prev.map(c => {\n            return {...c, isFlipped};\n        }));\n    }\n    const setCardCanFlip = (cardID, canFlip) => {\n        setCards(prev => prev.map(c => {\n            if (c.id !== cardID)\n                return c;\n            return {...c, canFlip};\n        }));\n    }\n    const setAllCardsCanFlip = ( canFlip) => {\n        setCards(prev => prev.map(c => {\n            return {...c, canFlip};\n        }));\n    }\n\n    const resetFirstAndSecondCards = () => {\n        setFirstCard(null);\n        setSecondCard(null);\n    }\n\n    const getScore = () => {\n        // set number of tries\n        setTimeout(() => {\n            setTries(tries+1)\n        }, 1000);\n\n        const cards = cardImages.filter(c => (c.canFlip === false))\n\n        console.log('you found ', cards)\n    }\n    const onSuccessGuess = () => {\n        console.log('on success')\n\n        setMatchedCards([...matchedCards, [firstCard, secondCard]])\n\n        setCardCanFlip(firstCard.id, false);\n        setCardIsFlipped(firstCard.id, false);\n\n        setCardCanFlip(secondCard.id, false);\n        setCardIsFlipped(secondCard.id, false);\n\n\n        resetFirstAndSecondCards();\n\n    }\n    const onFailureGuess = () => {\n        console.log('on failure')\n        const firstCardID = firstCard.id;\n        const secondCardID = secondCard.id;\n\n        setTimeout(() => {\n            setCardIsFlipped(firstCardID, true);\n        }, 1000);\n        setTimeout(() => {\n            setCardIsFlipped(secondCardID, true);\n        }, 1200);\n\n\n        resetFirstAndSecondCards();\n\n    }\n\n    const onCardClick = (card) => {\n        if (!canFlip)\n            return;\n        console.log('click on card ', card)\n        if (!card.canFlip)\n            return;\n\n        if ((firstCard && (card.id === firstCard.id) || (secondCard && (card.id === secondCard.id))))\n            return;\n\n        setCardIsFlipped(card.id, false);\n\n        (firstCard) ? setSecondCard(card) : setFirstCard(card);\n    }\n\n\n    const initialize = () =>{\n        setTimeout(() => {\n            let index = 0;\n            setAllCardsFlipped(true)\n            setTimeout(() => setCanFlip(true));\n        }, 3000);\n    }\n\n    const restart = ()=>{\n        setAllCardsFlipped(true)\n        setAllCardsCanFlip(true)\n        setCanFlip(true)\n        resetFirstAndSecondCards();\n        setTries(0)\n        setMatchedCards([])\n    }\n\n\n    // showcase\n    useEffect(() => {\n        initialize()\n    }, []);\n\n\n    useEffect(() => {\n        if (!firstCard || !secondCard)\n            return;\n        (firstCard.imageURL === secondCard.imageURL) ? onSuccessGuess() : onFailureGuess();\n        getScore()\n\n    }, [firstCard, secondCard])\n\n    useEffect(() => {\n        console.log('matchedcards ... ', matchedCards)\n    }, [matchedCards]);\n\n\n\n    useEffect(() => {\n        console.log('start ... ', start)\n        if(!start && !secondCard && firstCard) {\n            console.log('setstart ... ', start)\n            setStart(true)\n        }\n    }, [firstCard]);\n\n\n    console.log('cardImages ...', cards)\n    return (\n        <div>\n            <div className=\"header\">\n               {/*<div className=\"size\">*/}\n               {/*    <label htmlFor=\"sizeSelect\">Size: </label>*/}\n               {/*    <select onChange={e=>setSize(e.target.value * 2)} name=\"\" id=\"sizeSelect\">*/}\n               {/*        <option value=\"6\">6</option>*/}\n               {/*        <option value=\"7\">7</option>*/}\n               {/*        <option value=\"8\">8</option>*/}\n               {/*        <option value=\"9\">9</option>*/}\n               {/*    </select>*/}\n               {/*</div>*/}\n               <div className=\"result\">\n                   {\n                       start ? `You found ${matchedCards.length} out of ${size / 2 } pairs with ${tries} tries  ` : \"Find All The Pairs\"\n                   }\n               </div>\n\n                <div className=\"restart\">\n                    <button onClick={()=>restart()}>Restart</button>\n                </div>\n            </div>\n            <div className=\"playground\">\n\n                {cards.map(card => <Card onClick={() => onCardClick(card)} key={card.id} {...card}/>)}\n            </div>\n        </div>)\n\n}\n\n\nexport default GamePlayGround\n","import React from 'react';\n\nimport './App.scss';\nimport cardImages from './cardImages';\n\nimport GamePlayGround from \"./components/GamePlayGround\";\n\nfunction App() {\n\n  return (\n    <div className=\"\">\n      <GamePlayGround cardImages={cardImages}/>\n    </div>\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}