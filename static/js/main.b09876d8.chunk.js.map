{"version":3,"sources":["components/Card.js","components/CardsListNew.js","redux/memory/actions.js","components/Header.js","containers/index.js","data/cardImages.js","data/cards.js","redux/memory/reducer.js","redux/reducers.js","redux/memory/helpers.js","redux/memory/sagas.js","redux/sagas.js","redux/createStore.js","App.js","serviceWorker.js","index.js"],"names":["Card","imageURL","isFlipped","canFlip","onClick","className","alt","src","CardsListNew","cards","flip","map","card","key","id","actions","SET_STATE","INITIALIZE","RESTART","FLIP_CARD","RESIZE","Option","Select","Header","matchedCards","size","tries","restart","start","end","resize","length","type","disabled","defaultValue","style","width","onChange","value","App","this","props","initialize","memory","startGame","endGame","flipCard","Component","connect","dispatch","MemoryActions","payload","shuffleArray","array","sort","Math","random","generatePlayGroundCards","count","cardImages","cardsImages","Error","slice","uuid","flatMap","e","deepcopy","initialState","loading","error","round","guess1","guess2","reducer","state","action","getMemory","delay","ms","Promise","res","setTimeout","flipAllCards","prevCards","cardID","getCardsAfterSuccess","getCardsAfterFailure","rootSaga","console","info","select","put","call","memoryState","newState","api","all","takeEvery","root","sagaMiddleware","createSagaMiddleware","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","combineReducers","applyMiddleware","run","sagas","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.b09876d8.chunk.js","sourcesContent":["import React from \"react\";\n\n\nexport default function Card({imageURL, isFlipped, canFlip, onClick}) {\n    return  <div  className={\"card\" + (!isFlipped ? ' opened' : '') + (!canFlip ? ' matched' : '')} onClick={onClick}>\n        <div className=\"front\">\n            ?\n        </div>\n        <div className=\"back\">\n            <img alt=\"\" src={imageURL}/>\n        </div>\n    </div>;\n}\n","import React from  'react'\nimport Card from \"./Card\";\n\n\nconst CardsListNew = ({cards, flip})=> {\n\n    return (\n        <div>\n            <div className=\"playground\"  >\n                {cards.map(card => <Card\n                    onClick={()=>flip(card)}\n                    key={card.id}\n                    {...card}\n                />)}\n            </div>\n        </div>)\n}\n\n\nexport default CardsListNew\n","const actions = {\n    SET_STATE: 'memory/SET_STATE',\n    INITIALIZE: 'memory/INITIALIZE',\n    RESTART: 'memory/RESTART',\n    FLIP_CARD: 'memory/FLIP_CARD',\n    RESIZE: 'memory/RESIZE',\n}\nexport default actions\n","\nimport  React from 'react';\nimport { Button } from 'antd';\nimport { Select } from 'antd';\n\nconst { Option } = Select;\n\n\nconst  Header = ({matchedCards=0, size=18, tries=0, restart, start=true, end=false, resize, canFlip }) =>{\n    return (\n        <div className=\"header\">\n            <div className=\"result\">\n                <h3>\n                    {\n                        start ? end? \"Congratulation ! You found all pairs\" :\n                            `You found ${matchedCards.length} out of ${size / 2 } pairs with ${tries} tries  `\n                            : \"Find All The Pairs\"\n                    }\n                </h3>\n            </div>\n            <div className=\"left\">\n                <div className=\"restart\">\n                    <Button onClick={()=>restart()} type=\"primary\">Restart</Button>\n                </div>\n                <div className=\"resize\">\n                    <Select disabled={!canFlip} defaultValue={18} style={{ width: 120 }} onChange={value=>resize(value)}>\n                        <Option value={18} >9 Pairs</Option>\n                        <Option value={24} >12 Pairs</Option>\n                        <Option value={30} >15 Pairs</Option>\n                        <Option value={36} >18 Pairs</Option>\n                        <Option value={42} >21 Pairs</Option>\n                    </Select>\n                </div>\n            </div>\n        </div>\n    );\n};\nexport default Header\n","import React, { Component }  from 'react'\nimport { connect } from 'react-redux'\nimport CardsList from '../components/CardsListNew'\nimport MemoryActions from '../redux/memory/actions'\nimport Header from \"../components/Header\";\n\n\nconst mapStateToProps = ({memory}) => ({\n    memory\n});\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        initialize: () => dispatch({type : MemoryActions.INITIALIZE}),\n        restart: () => dispatch({type : MemoryActions.RESTART}),\n        flipCard: (card) => dispatch({type : MemoryActions.FLIP_CARD, payload: {card}}),\n        resize: (size) => dispatch({type : MemoryActions.RESIZE, payload :{size}}),\n    }\n}\n\n\nclass App extends Component {\n\n\n    componentDidMount() {\n        this.props.initialize()\n    }\n\n\n    render() {\n        const {  memory : {cards, size, tries, matchedCards, startGame, endGame, canFlip }, restart, flipCard, resize } = this.props;\n        return (\n            <div>\n               <Header\n                   canFlip={canFlip}\n                   size={size}\n                   tries={tries}\n                   matchedCards={matchedCards}\n                   restart={restart}\n                   resize={resize}\n                   start={startGame}\n                   end={endGame}\n               />\n               <CardsList\n                   cards={cards}\n                   flip={flipCard}\n               />\n            </div>\n        )\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","const cards = [\n    \"clubs_10.png\", \"clubs_2.png\", \"clubs_3.png\", \"clubs_4.png\", \"clubs_5.png\",\n    \"clubs_6.png\", \"clubs_7.png\", \"clubs_8.png\", \"clubs_9.png\", \"clubs_A.png\",\n    \"clubs_J.png\", \"clubs_K.png\", \"clubs_Q.png\",\n    \"diamonds_10.png\", \"diamonds_2.png\", \"diamonds_3.png\", \"diamonds_4.png\",\n    \"diamonds_5.png\", \"diamonds_6.png\", \"diamonds_7.png\", \"diamonds_8.png\",\n    \"diamonds_9.png\", \"diamonds_A.png\", \"diamonds_J.png\", \"diamonds_K.png\",\n    \"diamonds_Q.png\",\n    \"hearts_10.png\", \"hearts_2.png\", \"hearts_3.png\", \"hearts_4.png\",\n    \"hearts_5.png\", \"hearts_6.png\", \"hearts_7.png\", \"hearts_8.png\",\n    \"hearts_9.png\", \"hearts_A.png\", \"hearts_J.png\", \"hearts_K.png\",\n    \"hearts_Q.png\",\n    \"spades_10.png\", \"spades_2.png\", \"spades_3.png\", \"spades_4.png\",\n    \"spades_5.png\", \"spades_6.png\", \"spades_7.png\", \"spades_8.png\",\n    \"spades_9.png\", \"spades_A.png\", \"spades_J.png\", \"spades_K.png\",\n    \"spades_Q.png\"\n];\n\nexport default cards;\n","import uuid from 'react-uuid';\nimport deepcopy from \"deepcopy\";\nimport cardsImages from './cardImages'\n\nconst shuffleArray =(array)=>{\n    return array.sort(() => .5 - Math.random());\n}\nexport const generatePlayGroundCards = (count=18, cardImages=cardsImages)=> {\n\n    if (count % 2 !== 0)\n        throw new Error(\"Count must pair. but it is \" + count);\n\n    const cards = shuffleArray(cardImages)\n        .slice(0, count / 2)\n        .map(imageURL => ({\n            id: uuid(),\n            imageURL: \"images/cards/\" + imageURL,\n            isFlipped: false,\n            canFlip: true\n        }))\n        .flatMap(e => [e, {...deepcopy(e), id: uuid()}]);\n\n    return shuffleArray(cards);\n}\n","import actions from './actions'\nimport { generatePlayGroundCards } from '../../data/cards'\n\nexport const initialState = {\n    loading:false,\n    error:'',\n    cards : generatePlayGroundCards(),\n    round : 1,\n    tries : 0,\n    guess1 : null,\n    guess2 : null,\n    size : 18,\n    matchedCards: [],\n    startGame: false,\n    endGame: false,\n    canFlip: false\n}\n\nexport default function reducer(state = initialState, action) {\n    switch (action.type) {\n        case actions.SET_STATE:\n            return { ...state, ...action.payload }\n        default:\n            return state\n    }\n}\n","\nimport { combineReducers } from 'redux'\nimport memory from './memory/reducer'\n\n\nexport default () =>\n    combineReducers({\n        memory})\n","\nexport const getMemory = (state) => state.memory\n\nexport const delay = (ms) => new Promise(res => setTimeout(res, ms))\n\nexport const flipAllCards =(prevCards,isFlipped) => prevCards.map(card => {return {...card, isFlipped}})\nexport const flipCard =(prevCards,cardID,isFlipped) => {\n    return prevCards.map(card => {\n        if (card.id !== cardID)\n            return card;\n        return {...card, isFlipped};\n    })\n}\nexport const getCardsAfterSuccess = (prevCards,guess1,guess2) => {\n    return prevCards.map(card => {\n        return (card.id !== guess1.id && card.id !== guess2.id ) ? card : {...card,canFlip: false,isFlipped : false}\n    })\n}\n\nexport const getCardsAfterFailure = (prevCards,guess1,guess2) => {\n    return prevCards.map(card => {\n        return (card.id !== guess1.id && card.id !== guess2.id ) ? card : {...card,isFlipped : false}\n    })\n}\n","\nimport { all, takeEvery, select, put, call } from 'redux-saga/effects'\nimport actions from \"./actions\";\nimport { initialState } from './reducer'\nimport { generatePlayGroundCards } from '../../data/cards'\nimport {flipAllCards, flipCard, getCardsAfterFailure, getCardsAfterSuccess, getMemory, delay} from \"./helpers\";\n\n\n\nfunction* INITIALIZE(){\n    console.info('INITIALIZE begin')\n    const {size} = yield select(getMemory)\n    // generate cards\n    const cards = generatePlayGroundCards(size)\n    yield put({\n        type: 'memory/SET_STATE',\n        payload: {\n            cards\n        },\n    })\n    yield delay(3000)\n    // flip all cards\n    yield put({\n        type: 'memory/SET_STATE',\n        payload: {\n            cards : [...flipAllCards(cards,true)],\n            canFlip : true\n        },\n    })\n    console.info('INITIALIZE end')\n\n}\n\nfunction* RESTART(){\n    console.info('RESTART begin')\n\n    yield put({\n        type: 'memory/SET_STATE',\n        payload: initialState,\n    })\n    // reinitialize\n    yield call(INITIALIZE)\n    console.info('RESTART end')\n}\n\n\nfunction* FLIP_CARD({payload : {card}}){\n    console.info('FLIP_CARD begin')\n\n    const memoryState   = yield select(getMemory)\n    const {canFlip, guess1, guess2, cards, round, matchedCards,startGame, tries, size} = memoryState\n    let newState = {round : round +1 }\n\n    //we can not flip yet\n    if(!canFlip || !card.canFlip )\n        return;\n\n    //click on same flipped card\n    if ((guess1 && (card.id === guess1.id) || (guess2 && (card.id === guess2.id))))\n        return;\n\n\n\n    if(round % 2 === 1){\n        // first guess\n        if (!startGame) newState = { ...newState, startGame : true}\n\n        yield put({\n            type: 'memory/SET_STATE',\n            payload: {\n                ...newState,\n                cards : [...flipCard(cards,card.id,false)],\n                guess1: card,\n            },\n        })\n\n\n    }else{\n\n        newState = { ...newState, tries : tries+1}\n\n        //second guess\n        if(card.imageURL === guess1.imageURL){\n            // successful guess\n            yield put({\n                type: 'memory/SET_STATE',\n                payload: {\n                    ...newState,\n                    cards : [...getCardsAfterSuccess(cards,guess1,card)],\n                    guess1:null,\n                    guess2:null,\n                    matchedCards : [...matchedCards , [guess1,card]],\n                    endGame : (size/2 === matchedCards.length + 1)\n                },\n            })\n        }else{\n            //failure guess\n            yield put({\n                type: 'memory/SET_STATE',\n                payload: {\n                    ...newState,\n                    cards : [...getCardsAfterFailure(cards,guess1,card)],\n                    guess1 : null,\n                    guess2 : null,\n                    canFlip : false\n                },\n            })\n            yield delay(1000)\n            yield put({\n                type: 'memory/SET_STATE',\n                payload: {\n                    cards : [...flipAllCards(cards,true)],\n                    canFlip :true\n                },\n            })\n\n        }\n    }\n\n    console.info('FLIP_CARD end')\n}\n\n\n\nfunction* RESIZE({payload : {size}}){\n    console.info('RESIZE begin')\n\n    yield put({\n        type: 'memory/SET_STATE',\n        payload: {...initialState, size},\n    })\n    // reinitialize\n    yield call(INITIALIZE)\n    console.info('RESIZE end')\n}\n\n\nexport default function* rootSaga(api) {\n    yield all([\n        takeEvery(actions.INITIALIZE, INITIALIZE),\n        takeEvery(actions.RESTART, RESTART),\n        takeEvery(actions.FLIP_CARD, FLIP_CARD),\n        takeEvery(actions.RESIZE, RESIZE),\n\n    ])\n}\n","import {  all } from 'redux-saga/effects'\n\n\n\nimport memory from './memory/sagas'\n\n\n\n\n\n\n/* ------------- Connect Types To Sagas ------------- */\nexport default function * root () {\n    yield all([memory()])\n}\n","import { createStore, applyMiddleware, compose } from \"redux\";\nimport createSagaMiddleware from \"redux-saga\";\n\n\nimport reducers from \"./reducers\";\nimport sagas from \"./sagas\";\n\nconst sagaMiddleware = createSagaMiddleware();\n\n\nconst composeEnhancers =\n    typeof window === \"object\" && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\n        ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({})\n        : compose;\n\nconst store = createStore(\n    reducers(),\n    composeEnhancers(applyMiddleware(sagaMiddleware))\n);\nsagaMiddleware.run(sagas);\n\nexport default store;\n","import React from 'react';\nimport { Provider } from 'react-redux'\nimport RootContainer from './containers'\nimport store from './redux/createStore'\n\nimport './App.scss';\n\nfunction App() {\n\n\n\n  return (\n      <Provider store={store}>\n          <RootContainer />\n      </Provider>\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}